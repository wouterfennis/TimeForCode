name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Adjust the .NET version as needed

    - name: Checkout code
      uses: actions/checkout@v4
      with:         
        fetch-depth: 0

    - name: Cache SonarQube Cloud packages
      uses: actions/cache@v4
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarQube Cloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install dotnet tools
      run: dotnet tool restore

    - name: Restore dependencies
      run: dotnet restore ./TimeForCode.sln

    - name: SonarCloud Scan Start
      run: |
          dotnet dotnet-sonarscanner begin /k:"wouterfennis_TimeForCode" /o:"wouterfennis" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.vstest.reportsPaths=**/TestResults/**/*.trx /d:sonar.cs.vscoveragexml.reportsPaths=**/TestResults/**/*.xml /d:sonar.scanner.scanAll=true /d:sonar.coverage.exclusions=tst/**

    - name: Build
      run: |
          dotnet build ./TimeForCode.sln --no-restore --configuration Release

    - name: Run tests
      run: |
         dotnet test ./TimeForCode.sln --no-build --verbosity normal --configuration Release --no-build --collect "Code Coverage;Format=Xml" --logger trx --results-directory TestResults

    - name: SonarCloud Scan End
      run: |
          dotnet dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - name: Publish
      run: dotnet publish ./src/Authorization/TimeForCode.Authorization.Api/*.csproj --no-build --configuration Release --output ./publish

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-app
        path: ./publish

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install markdownlint-cli
      run: npm install -g markdownlint-cli

    - name: Run markdownlint
      run: markdownlint "**/*.md"

    - name: Run dotnet-format
      run: dotnet format ./TimeForCode.sln --no-restore --verify-no-changes

    - name: Run NuGet security scan
      run: dotnet list ./TimeForCode.sln package --vulnerable --include-transitive